import { getDataExtractorApi } from "@hediet/debug-visualizer-data-extraction"

getDataExtractorApi().registerDefaultExtractors()

/*
Visualize this expression:
```ts
hedietDbgVis.markedGrid(
    array,
    hedietDbgVis.tryEval(["i", "j", "left", "right"])
)
```
*/

// function same(arr1: number[], arr2: number[]): boolean {
//   if (arr1.length !== arr2.length) {
//     return false
//   }

//   // [1, 2, 3]
//   for (let numArr1 of arr1) /*?*/ {
//     // [4, 1, 9]
//     for (let i = 0; i < arr2.length; i++) {
//       if (numArr1 /*?*/ ** 2 === arr2[i]) {
//         arr2.splice(i, 1)
//         //?
//       }
//     }
//   }
//   arr1 //?
//   arr2 //?
//   return arr2.length === 0
// }

function same(arr1: number[], arr2: number[]): boolean {
  if (arr1.length !== arr2.length) {
    //?
    return false
  }

  for (let i = 0; i < arr1.length; i++ /* [1, 2, 3] */) {
    debugger
    let findSquaredIndex = arr2.indexOf(arr1[i] ** 2)
    if (findSquaredIndex !== -1) {
      arr2 //?
      arr2.splice(findSquaredIndex, 1)
      arr2 //?
    }
  }

  arr1 //?
  arr2 //?
  return arr2.length === 0
}

// Normal tests
same([1, 2, 3], [4, 1, 9]) //?
// same([1, 2, 3], [1, 9]) //?
// same([1, 2, 1], [4, 4, 1]) //?

// // Performance tests
// same([1, 2, 3], [4, 1, 9]) //?.
// same([1, 2, 3], [1, 9]) //?.
// same([1, 2, 1], [4, 4, 1]) //?.
